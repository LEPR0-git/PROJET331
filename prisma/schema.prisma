generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        Int      @id @default(autoincrement())
  email     String   @unique
  password  String
  role      UserRole @default(FREELANCE)
  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @map("updated_at")

  // Relations
  freelanceProfile FreelanceProfile?
  clientProfile    ClientProfile?

  @@map("users")
}

model FreelanceProfile {
  id            Int           @id @default(autoincrement())
  firstName     String?       @map("first_name")
  lastName      String?       @map("last_name")
  title         String?
  description   String?
  skills        String[]
  hourlyRate    Float?        @map("hourly_rate")
  availability  Availability? @default(AVAILABLE)
  createdAt     DateTime      @default(now()) @map("created_at")
  updatedAt     DateTime      @default(now()) @map("updated_at")

  // Relations
  portfolioItems PortfolioItem[]
  userId         Int           @unique
  user           User          @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("freelance_profiles")
}

model ClientProfile {
  id          Int      @id @default(autoincrement())
  companyName String?  @map("company_name")
  industry    String?
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @map("updated_at")

  // Relations
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("client_profiles")
}

model PortfolioItem {
  id                 Int              @id @default(autoincrement())
  title              String
  description        String?
  imageUrl           String?          @map("image_url")
  projectUrl         String?          @map("project_url")
  createdAt          DateTime         @default(now()) @map("created_at")

  // Relations
  freelanceProfileId Int
  freelanceProfile   FreelanceProfile @relation(fields: [freelanceProfileId], references: [id], onDelete: Cascade)

  @@map("portfolio_items")
}

enum UserRole {
  FREELANCE
  CLIENT
  ADMIN
}

enum Availability {
  AVAILABLE
  UNAVAILABLE
  PART_TIME
}